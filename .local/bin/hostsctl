#!/usr/bin/env bash
# Control manager for hosts file.

# Determine script path
SCRIPT_PATH="${BASH_SOURCE[0]}"
while [[ -L "${SCRIPT_PATH}" ]]; do
    SCRIPT_DIR="$(cd -P "$(dirname "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
    SCRIPT_PATH="$(readlink "${SCRIPT_PATH}")"
    [[ ${SCRIPT_PATH} != /* ]] && SCRIPT_PATH="${SCRIPT_DIR}/${SCRIPT_PATH}"
done
SCRIPT_PATH="$(readlink -f "${SCRIPT_PATH}")"
SCRIPT_DIR="$(cd -P "$(dirname -- "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
SCRIPT_BASENAME=${SCRIPT_PATH##*/}

# colors
export reset_color='\e[0m'
export info_color='\e[1;34m'
export warning_color='\e[1;33m'
export error_color='\e[1;31m'
export success_color='\e[1;32m'

print_info() {
    local _message="${1}"
    echo -e "${info_color:-}[INFO] ${_message:-Info}${reset_color:-}"
}

print_fail() {
    local _message="$1"
    echo -e "${error_color:-}[FAIL] ${_message:-Info}${reset_color:-}" >&2
    exit 1
}

print_okay() {
    local _message="${1}"
    echo -e "${success_color:-}[OKAY] ${_message:-OK}${reset_color:-}"
}

print_warn() {
    local _message="${1}"
    echo -e "${warning_color:-}[WARN] ${_message:-Warning}${reset_color:-}"
}

print_usage() {
    cat <<__USAGE__
Usage: ${SCRIPT_BASENAME} [OPTIONS] ["<ip>" "<name>" | "<host>"]

    Control manager for hosts file.

    You must have sudo configured to use this script on Linux.

    You must have Admin Rights to use this script on Windows (Git Bash).

    Initialize hosts file (cp /etc/hosts to ~/.config/hostsctl/000-hosts and create ~/.config/hostsctl/001-additional):

        $ ${SCRIPT_BASENAME} init

    Update hosts file from the ~/.config/hostsctl/ files (or during edit time):

        $ ${SCRIPT_BASENAME} update

Example:

    $ ${SCRIPT_BASENAME} add 127.0.0.1 localhost
    $ ${SCRIPT_BASENAME} remove localhost
    $ ${SCRIPT_BASENAME} edit work

Commands:
    init                  Initialize hosts file.
    update                Update hosts file from the ~/.config/hostsctl/ files.
    add <ip> <name>       Add host to additional hosts file.
    remove <host>         Remove host from additional hosts file.
    edit [<hosts_file>]   Edit hosts file.
                          Default: 001-additional
    list                  List hosts file from the ~/.config/hostsctl/ files.
    cat <hosts_file>      Print hosts file from the ~/.config/hostsctl/ files.
                          Default: 001-additional
    show                  Show system hosts files.

Options:
    --version               Print utility version.
    --help                  Print this help message.

__USAGE__
}

get_os() {
    local system_name=""
    # shellcheck disable=SC2034
    readonly version="1.0.1"
    if [[ -f /etc/os-release ]]; then
        # shellcheck disable=SC1091
        . /etc/os-release
        # shellcheck disable=SC2153
        system_name=${NAME}
    elif type lsb_release >/dev/null 2>&1; then
        system_name=$(lsb_release -si)
    elif [[ -f /etc/lsb-release ]]; then
        # shellcheck disable=SC1091
        . /etc/lsb-release
        system_name=${DISTRIB_ID}
    elif [[ -f /etc/debian_version ]]; then
        # shellcheck disable=SC1091
        . /etc/debian_version
        system_name=Debian
    elif [[ -f /etc/SuSe-release ]]; then
        # shellcheck disable=SC1091
        . /etc/SuSe-release
        system_name=Suse
    elif [[ -f /etc/redhat-release ]]; then
        # shellcheck disable=SC1091
        . /etc/redhat-release
        system_name=redhat-release
    elif command -v termux-setup-storage >/dev/null 2>&1; then
        system_name="Termux"
    else
        system_name=$(uname -s)
    fi

    if [[ "${system_name}" =~ "Kali" ]]; then
        echo "kali"
    elif [[ "${system_name}" =~ "ALT" || "${ID}" == "altlinux" ]]; then
        echo "alt"
    elif [[ "${system_name}" =~ "Termux" ]]; then
        echo "termux"
    elif [[ "${system_name}" =~ "openSUSE" ]]; then
        echo "opensuse"
    elif [[ "${system_name}" =~ "Mint" ]]; then
        echo "mint"
    elif [[ "${system_name}" =~ "Raspbian" ]]; then
        echo "raspbian"
    elif [[ "${system_name}" =~ "Ubuntu" ]]; then
        echo "ubuntu"
    elif [[ "${system_name}" =~ "elementary" ]]; then
        echo "elementary"
    elif [[ "${system_name}" =~ "MINGW" || "${system_name}" =~ "CYGWIN" ]]; then
        echo "windows"
    else
        echo "unsupported"
    fi
    return 0
}

system_name="$(get_os)"
HOSTS_FILE="/etc/hosts"
HOSTS_DIR="${HOME}/.config/hostsctl"
MAIN_HOSTS_FILE="000-hosts"
ADDITIONAL_HOSTS_FILE="001-additional"

if [[ "${system_name}" == "windows" ]]; then
    HOSTS_FILE="/c/Windows/System32/Drivers/etc/hosts"
fi

print_version() {
    echo "${SCRIPT_BASENAME}, 1.0.10"
}

if [[ $# -eq 0 ]]; then
    print_usage
    exit 0
fi

init_command() {
    mkdir -p "${HOSTS_DIR}"
    cp "${HOSTS_FILE}" "${HOSTS_DIR}/${MAIN_HOSTS_FILE}"
    touch "${HOSTS_DIR}/${ADDITIONAL_HOSTS_FILE}"
    print_info "Initialized hosts files."
}

update_command() {
    hosts_files_content="$(cat "${HOSTS_DIR}"/*)"
    print_info "Updated hosts file:"
    echo "${hosts_files_content}"
    if [[ "${system_name}" == "windows" ]]; then
        echo "${hosts_files_content}" >"${HOSTS_FILE}"
    else
        sudo bash -c "echo \"${hosts_files_content}\" > \"${HOSTS_FILE}\""
    fi
    print_okay "Hosts file updated successfully."
}

add_command() {
    local _ip _name
    _ip="${1}"
    _name="${2}"
    hosts_files_content="${_ip} ${_name}"
    print_info "Add ${success_color}${hosts_files_content}${info_color} to the ${success_color}${ADDITIONAL_HOSTS_FILE}${info_color} hosts file"
    echo "${hosts_files_content}" >>"${HOSTS_DIR}/${ADDITIONAL_HOSTS_FILE}"
    update_command
}

remove_command() {
    local _content
    _content="${1}"
    print_info "Remove ${success_color}${_content}${info_color} from the ${success_color}${ADDITIONAL_HOSTS_FILE}${info_color} hosts file"
    hosts_to_remove="$(grep "${_content}" "${ADDITIONAL_HOSTS_FILE}")"
    print_info "hosts to remove: ${success_color}${hosts_to_remove}${info_color}"
    sed -i "/${_content}/d" "${HOSTS_DIR}/${ADDITIONAL_HOSTS_FILE}"
    update_command
}

edit_command() {
    local _hosts_file
    _hosts_file="${1}"
    print_info "Edit ${success_color}${_hosts_file}${info_color} hosts file"
    "${EDITOR}" "${HOSTS_DIR}/${_hosts_file}"
    print_okay "Hosts file ${success_color}${_hosts_file}${info_color} edited successfully."
    update_command
}

list_command() {
    print_info "List hosts files:"
    ls "${HOSTS_DIR}" -1
}

cat_command() {
    local _hosts_file
    _hosts_file="${1}"
    if [[ "${_hosts_file}" == "all" ]]; then
        print_info "Print all hosts files"
        cat "${HOSTS_DIR}"/*
    else
        print_info "Print ${success_color}${_hosts_file}${info_color} hosts file"
        cat "${HOSTS_DIR}/${_hosts_file}"
    fi
}

show_command() {
    print_info "Show ${success_color}${HOSTS_FILE}${info_color}"
    cat "${HOSTS_FILE}"
}

while [[ $# -ne 0 ]]; do
    case "${1}" in
    --)
        shift
        ;;
    -v | --version)
        print_version
        exit 0
        ;;
    -h | --help)
        print_usage
        exit 0
        ;;
    i | init)
        init_command
        exit 0
        ;;
    u | update)
        update_command
        exit 0
        ;;
    a | add)
        ip="${2}"
        name="${3}"
        if [[ -z "${ip}" || -z "${name}" ]]; then
            print_fail "Usage: ${SCRIPT_BASENAME} add <ip> <name>"
        fi
        add_command "${ip}" "${name}"
        exit 0
        ;;
    r | remove)
        host="${2}"
        if [[ -z "${host}" ]]; then
            print_fail "Usage: ${SCRIPT_BASENAME} remove <host>"
        fi
        remove_command "${host}"
        exit 0
        ;;
    e | edit)
        local_hosts_file="${2}"
        if [[ -z "${local_hosts_file}" ]]; then
            edit_command "${ADDITIONAL_HOSTS_FILE}"
            exit 0
        fi
        edit_command "${local_hosts_file}"
        exit 0
        ;;
    l | list)
        list_command
        exit 0
        ;;
    c | cat)
        local_hosts_file="${2}"
        if [[ -z "${local_hosts_file}" ]]; then
            cat_command "${ADDITIONAL_HOSTS_FILE}"
            exit 0
        fi
        cat_command "${local_hosts_file}"
        exit 0
        ;;
    s | show)
        show_command
        exit 0
        ;;
    *)
        print_fail "Unknown parameter: ${1}"
        ;;
    esac
done
